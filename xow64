#!/data/data/com.termux/files/usr/bin/bash
# https://github.com/ar37-rs/xow64-wine

# export WLR_USE_UNIX_SOCKET=1
# using glthread relatively faster for wined3d (very intense cpu)
# export MESA_GLTHREAD=true
export WINEESYNC_TERMUX=1
export WINEESYNC=1

if [[ "$1" == "proot=true" ]]; then
    if [[ $(echo $PREFIX) == "/data/data/com.termux/files/usr" ]]; then
        echo "Proot Mode is only available on proot."
        exit
    fi
    if [ ! -d ~/xow64_prefix ]; then
        mkdir ~/xow64_prefix
    fi
    touch ~/xow64_prefix/.xow64-proot
    touch ~/xow64_prefix/.xow64-box64-custom
    echo "proot mode enabled."
    exit
elif [[ "$1" == "proot=false" ]]; then
    rm -rf ~/xow64_prefix/.xow64-proot
    rm -rf ~/xow64_prefix/.xow64-box64-custom
    echo "proot mode disabled."
    exit
elif [[ "$1" == "box64-custom=true" ]]; then
    if [ ! -d ~/xow64_prefix ]; then
        mkdir ~/xow64_prefix
    fi
    touch ~/xow64_prefix/.xow64-box64-custom
    echo "using custom box64."
    exit
elif [[ "$1" == "box64-custom=false" ]]; then
    if [ ! -d ~/xow64_prefix ]; then
        mkdir ~/xow64_prefix
    fi
    rm -rf ~/xow64_prefix/.xow64-box64-custom
    echo "using default builtin box64."
    exit
else

if [ -f ~/xow64_prefix/.xow64-proot ]; then
    export TPH=~/xow64_prefix
    export WINEPREFIX=~/xow64_prefix/.xow64_wine
    echo "info: WINEPREFIX=~/xow64_prefix/.xow64_wine"
else
    export TPH=/data/data/com.termux/files/home
    export WINEPREFIX=$TPH/.xow64_wine
    echo "info: WINEPREFIX=$TPH/.xow64_wine"
fi

export BOX64_PATH=$TPH/xow64_wine/bin:$BOX64_PATH

if [ -f $TPH/.xow64-proot ]; then
    export BOX64_RCFILE=/etc/box64.box64rc
    export BOX64_LD_LIBRARY_PATH=$TPH/xow64_wine/lib/wine/i386-windows:$TPH/xow64_wine/lib/wine/x86_64-windows:$TPH/xow64_wine/lib/wine/i386-unix:$TPH/xow64_wine/lib/wine/x86_64-unix:$BOX64_LD_LIBRARY_PATH
else
    export BOX64_RCFILE=$TPH/xow64_box64/etc/box64.box64rc
    export BOX64_LD_LIBRARY_PATH=$TPH/xow64_wine/lib/wine/i386-windows:$TPH/xow64_wine/lib/wine/x86_64-windows:$TPH/xow64_wine/lib/wine/x86_64-unix:$TPH/xow64_box64/lib/x86_64-linux-gnu:$TPH/xow64_box64/lib/i386-linux-gnu
fi

# BOX64 options
export BOX64_X11THREADS=1
export BOX64_DYNAREC_SAFEFLAGS=2
export BOX64_DYNAREC_STRONGMEM=1
# export BOX64_MAXCPU=8
# export BOX64_DYNAREC_BIGBLOCK=0
# export BOX64_DYNAREC_WEAKBARRIER=1
# export BOX64_DYNAREC_X87DOUBLE=1
# export BOX64_DYNAREC_PAUSE=1
# export BOX64_DYNAREC_WAIT=1
# export BOX64_DYNAREC_CALLRET=1
# export BOX64_DYNAREC_FASTNAN=0
# export BOX64_DYNAREC_FASTROUND=0
# export BOX64_DYNAREC_FORWARD=256
# export BOX64_UNITYPLAYER=1
# export BOX64_PREFER_WRAPPED=0
# export BOX64_PREFER_EMULATED=1
# export BOX64_WRAP_EGL=$PREFIX/lib/libGL.so.1
# export BOX64_NOSIGILL=0
# export BOX64_NOBANNER=1
# no sandbox and inprocess gpu
# currently is only working for box64 < 0.3.3
# export BOX64_INPROCESSGPU=1
# export BOX64_NOSANDBOX=1

if [ -f $TPH/xow64_wine/.no_debug ]; then
    export WINEDEBUG=-all
fi

if [ -f $TPH/xow64_wine/.no_mmap32 ]; then
    export BOX64_MMAP32=0
else
    export BOX64_MMAP32=1
fi

if [ -f $TPH/.xow64-proot ]; then
    echo "xow64 on proot mode"
    export WINE_CA_CERT_PATH=/etc/ssl/certs
    export EXEX=exec
else
    export LD_LIBRARY_PATH=$TPH/xow64_box64/lib/aarch64-linux-gnu:$LD_LIBRARY_PATH
    export WINE_CA_CERT_PATH=$PREFIX/glibc/etc/ssl/certs
    export EXEX="grun -s"
fi

if [ -f $TPH/.xow64-box64-custom ]; then
    BOX64D=$(which box64)
    if [[ $BOX64D == "" ]]; then
        echo "box64 not found, make sure box64 is installed."
        if [ -f $TPH/.xow64-proot ]; then
            echo "xow64 on proot mode."
        fi
        exit
    fi
    export BOX64X=$BOX64D
else
    export BOX64X=$TPH/xow64_box64/box64
fi

pan_info() {
    echo "info:"
    if [ -f $TPH/xow64_drivers/.panthor ]; then
        echo "Panthor is only supported on some mali devices."
        echo "with kernel 6.10+"
     else
        echo "Panfrost is only supported on some mali devices."
        echo "with kernel 5.10+"
    fi
}

proot_info() {
    if [ -f $TPH/.xow64-proot ]; then
        echo "the related option is not available on proot mode."
        exit
    fi
}

vkinfo() {
    if [ -f $TPH/xow64_wine/.vk-radeon ]; then
        echo "using radeon vulkan driver."
        export LIBGL_DRI3_DISABLE=0
        export LIBGL_ALWAYS_SOFTWARE=0
        export MESA_GL_VERSION_OVERRIDE=4.6COMPAT
	export MESA_GLSL_VERSION_OVERRIDE=460
	export MESA_GLES_VERSION_OVERRIDE=3.2
	export MESA_LOADER_DRIVER_OVERRIDE=zink
        if [ -f $TPH/.xow64-proot ]; then 
            export VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/radeon_icd.aarch64.json
        else
	    if [ -f $PREFIX/glibc/share/vulkan/icd.d/radeon_icd.aarch64.json ]; then
	        export VK_ICD_FILENAMES=$PREFIX/glibc/share/vulkan/icd.d/radeon_icd.aarch64.json
            else
                export LD_LIBRARY_PATH=$TPH/xow64_drivers/lib:$LD_LIBRARY_PATH && export LD_LIBRARY_PATH=$TPH/xow64_drivers/lib/d3d:$LD_LIBRARY_PATH
                export LIBGL_DRIVERS_PATH=$TPH/xow64_drivers/lib/dri
                export VK_ICD_FILENAMES=$TPH/xow64_drivers/share/vulkan/icd.d/radeon_icd.aarch64.json
            fi
        fi
    elif [ -f $TPH/xow64_wine/.vk-turnip ]; then
        export LIBGL_DRI3_DISABLE=0
        export LIBGL_ALWAYS_SOFTWARE=0
        echo "using adreno/turnip vulkan driver."
        export MESA_GL_VERSION_OVERRIDE=4.6COMPAT
	export MESA_GLSL_VERSION_OVERRIDE=460
	export MESA_GLES_VERSION_OVERRIDE=3.2
	export MESA_LOADER_DRIVER_OVERRIDE=zink
	export TU_DEBUG=noconform
        if [ -f $TPH/.xow64-proot ]; then 
            export VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/freedreno_icd.aarch64.json
        else    
            export VK_ICD_FILENAMES=$PREFIX/glibc/share/vulkan/icd.d/freedreno_icd.aarch64.json
        fi
    elif [ -f $TPH/xow64_wine/.vk-llvmpipe ]; then
        echo "using llvmpipe vulkan driver."
        if [ -f $TPH/.xow64-proot ]; then 
            export VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/lvp_icd.aarch64.json
        else
            if [ -f $TPH/xow64_drivers/share/vulkan/icd.d/lvp_icd.aarch64.json ]; then
                export VK_ICD_FILENAMES=$TPH/xow64_drivers/share/vulkan/icd.d/lvp_icd.aarch64.json
            else
                export VK_ICD_FILENAMES=$PREFIX/glibc/share/vulkan/icd.d/lvp_icd.aarch64.json
            fi
        fi
    else
	echo "using default vulkan driver."
    fi

    if [ -f $TPH/xow64_wine/.dxvk-proton ]; then
        echo "with dxvk-proton (vkd3d) enabled."
    fi
}

wine_q() {
    kill -9 $(pgrep -f ".exe") 2>/dev/null
    kill -9 $(pgrep -f ".cmd") 2>/dev/null
    kill -9 $(pgrep -f ".bat") 2>/dev/null
}

dllsoverride() {
    if [ ! -f $TPH/.xow64_wine/user.reg ]; then
        $EXEX $BOX64X $TPH/xow64_wine/bin/wine wineboot
    fi

if [ -f $TPH/.xow64_wine/user.reg ]; then
cd && cat << EOF >> $TPH/.xow64_wine/user.reg
[Software\\\Wine\\\DllOverrides]
"di"="native,builtin"
"dinput"="native,builtin"
"dinput8"="native,builtin"
"xinput1_1"="native,builtin"
"xinput1_2"="native,builtin"
"xinput1_3"="native,builtin"
"xinput1_4"="native,builtin"
"xinput9_1_0"="native,builtin"
EOF
fi
}

if [[ "$1" == "install" || "$1" == "update-all" ]]; then
    wine_q
    if [ -f $TPH/.xow64-proot ]; then
       echo "Installing and updating all xow64 components..." && cd && rm -rf ~/xow64_box64.tar.xz && rm -rf ~/xow64_wine.tar.xz && rm -rf ~/xow64_wine_patch.tar.xz && rm -rf ~/wined3d.tar.xz && rm -rf ~/xow64_wine/wined3d.tar.xz && cd && wget https://github.com/ar37-rs/xow64-wine/releases/download/latest/xow64_wine.tar.xz && echo "extracting xow64_wine.tar.xz..." && tar -xf ~/xow64_wine.tar.xz && rm -rf ~/xow64_wine.tar.xz && cd && wget https://github.com/ar37-rs/xow64-wine/releases/download/latest/xow64_wine_patch.tar.xz && echo "extracting xow64_wine_patch.tar.xz..." && tar -xf ~/xow64_wine_patch.tar.xz && rm -rf ~/xow64_wine_patch.tar.xz && cp -r xow64_wine $TPH/ && cp -r .xow64_wine $TPH/ && wget https://github.com/ar37-rs/xow64-wine/raw/refs/heads/main/components/wined3d.tar.xz && mv ~/wined3d.tar.xz $TPH/xow64_wine/wined3d.tar.xz && rm -rf ~/xow64_box64 && rm -rf ~/xow64_wine && rm -rf ~/.xow64_wine
       if [ ! -d $TPH/xow64_drivers ]; then
            mkdir $TPH/xow64_drivers
       fi
    else
       cd && pkg update && pkg install tar virglrenderer angle-android openssl wget which glibc-repo && pkg update && pkg install glibc glibc-runner glib*glibc libx11-glibc pulseaudio-glibc libpulse-glibc mesa-*glibc vulkan-tools*-glibc freetype-glibc fontconfig-glibc libxcomposite-glibc libxcursor-glibc libxrender-glibc libxi-glibc libxinerama-glibc libxkbcommon-glibc libxrandr-glibc libxrender-glibc libgnutls-glibc openssl-glibc zstd-glibc zlib-glibc libxshmfence-glibc vulkan-icd-loader-glibc && echo "Installing and updating all xow64 components..." && cd && rm -rf $TPH/xow64_box64.tar.xz && rm -rf $TPH/xow64_wine.tar.xz && rm -rf $TPH/xow64_wine_patch.tar.xz && rm -rf $TPH/wined3d.tar.xz && rm -rf $TPH/xow64_wine/wined3d.tar.xz && cd && wget https://github.com/ar37-rs/xow64-wine/raw/refs/heads/main/components/xow64_box64.tar.xz && echo "extracting xow64_box64.tar.xz..." && tar -xf $TPH/xow64_box64.tar.xz && rm -rf $TPH/xow64_box64.tar.xz && cd && wget https://github.com/ar37-rs/xow64-wine/releases/download/latest/xow64_wine.tar.xz && echo "extracting xow64_wine.tar.xz..." && tar -xf $TPH/xow64_wine.tar.xz && rm -rf $TPH/xow64_wine.tar.xz && cd && wget https://github.com/ar37-rs/xow64-wine/releases/download/latest/xow64_wine_patch.tar.xz && echo "extracting xow64_wine_patch.tar.xz..." && tar -xf $TPH/xow64_wine_patch.tar.xz && rm -rf $TPH/xow64_wine_patch.tar.xz && cd && wget https://github.com/ar37-rs/xow64-wine/raw/refs/heads/main/components/wined3d.tar.xz && mv $TPH/wined3d.tar.xz $TPH/xow64_wine/wined3d.tar.xz
    fi
    
    cp -r $TPH/xow64_wine/share/wine /data/data/com.termux/files/usr/glibc/share
    dllsoverride
    if [[ "$1" == "install" ]]; then
        echo "done, all essential xow64 components are installed."
    else
        echo "done, all essential xow64 components are updated."
    fi
    if [ -d /data/data/com.termux/files/usr/glibc/share/wine ]; then
        rm -rf /data/data/com.termux/files/usr/glibc/share/wine
    fi
elif [[ "$1" == "install-deps" ]]; then
    proot_info
    cd && pkg update && pkg install tar virglrenderer angle-android openssl wget which glibc-repo && pkg update && pkg install glibc glibc-runner glib*glibc libx11-glibc pulseaudio-glibc libpulse-glibc mesa-*glibc vulkan-tools*-glibc freetype-glibc fontconfig-glibc libxcomposite-glibc libxcursor-glibc libxrender-glibc libxi-glibc libxinerama-glibc libxkbcommon-glibc libxrandr-glibc libxrender-glibc libgnutls-glibc openssl-glibc zstd-glibc zlib-glibc libxshmfence-glibc vulkan-icd-loader-glibc
elif [[ "$1" == "reinstall-deps" ]]; then
    proot_info
    cd && pkg update && pkg reinstall tar openssl wget which glibc-repo && pkg update && pkg reinstall glibc glibc-runner glib*glibc libx11-glibc pulseaudio-glibc libpulse-glibc mesa-*glibc vulkan-tools*-glibc freetype-glibc fontconfig-glibc libxcomposite-glibc libxcursor-glibc libxrender-glibc libxi-glibc libxinerama-glibc libxkbcommon-glibc libxrandr-glibc libxrender-glibc libgnutls-glibc openssl-glibc zstd-glibc zlib-glibc libxshmfence-glibc vulkan-icd-loader-glibc
elif [[ "$1" == "box64=0.3.3" || "$1" == "update-box64" ]]; then
    proot_info
    echo "Installing box64-0.3.3..." && cd && rm -rf $TPH/xow64_box64.tar.xz && rm -rf && cd && wget https://github.com/ar37-rs/xow64-wine/raw/refs/heads/main/components/xow64_box64.tar.xz && echo "extracting xow64_box64.tar.xz..." && tar -xf $TPH/xow64_box64.tar.xz && rm -rf $TPH/xow64_box64.tar.xz && echo "done."
elif [[ "$1" == "box64=0.3.2" ]]; then
    proot_info
    echo "Installing box64-0.3.2..." && cd && rm -rf $TPH/xow64_box64-0.3.2.tar.xz && rm -rf && cd && wget https://github.com/ar37-rs/xow64-wine/raw/refs/heads/main/components/xow64_box64-0.3.2.tar.xz && echo "extracting xow64_box64-0.3.2.tar.xz..." && tar -xf $TPH/xow64_box64-0.3.2.tar.xz && rm -rf $TPH/xow64_box64-0.3.2.tar.xz && echo "done."
elif [[ "$1" == "box64=0.3.1" ]]; then
    proot_info
    echo "Installing box64-0.3.1..." && cd && rm -rf $TPH/xow64_box64-0.3.1.tar.xz && rm -rf && cd && wget https://github.com/ar37-rs/xow64-wine/raw/refs/heads/main/components/xow64_box64-0.3.1.tar.xz && echo "extracting xow64_box64-0.3.1.tar.xz..." && tar -xf $TPH/xow64_box64-0.3.1.tar.xz && rm -rf $TPH/xow64_box64-0.3.1.tar.xz && echo "done."
elif [[ "$1" == "box64=0.3.0" ]]; then
    proot_info
    echo "Installing box64-0.3.0..." && cd && rm -rf $TPH/xow64_box64-0.3.0.tar.xz && rm -rf && cd && wget https://github.com/ar37-rs/xow64-wine/raw/refs/heads/main/components/xow64_box64-0.3.0.tar.xz && echo "extracting xow64_box64-0.3.0.tar.xz..." && tar -xf $TPH/xow64_box64-0.3.0.tar.xz && rm -rf $TPH/xow64_box64-0.3.0.tar.xz && echo "done."        
elif [[ "$1" == "update-wine" ]]; then
    wine_q
    echo "Updating wine..."
    if [ -f $TPH/.xow64-proot ]; then
        cd && rm -rf ~/xow64_wine.tar.xz && cd && wget https://github.com/ar37-rs/xow64-wine/releases/download/latest/xow64_wine.tar.xz && echo "extracting xow64_wine.tar.xz..." && tar -xf ~/xow64_wine.tar.xz && cp -r xow64_wine $TPH/ && rm -rf ~/xow64_wine.tar.xz && rm -rf ~/xow64_wine && echo " " && echo "Updating wined3d components..." && cd && rm -rf ~/wined3d.tar.xz && rm -rf ~/xow64_wine/wined3d.tar.xz && wget https://github.com/ar37-rs/xow64-wine/raw/refs/heads/main/components/wined3d.tar.xz && mv ~/wined3d.tar.xz $TPH/xow64_wine/wined3d.tar.xz
    else
        cd && rm -rf $TPH/xow64_wine.tar.xz && cd && wget https://github.com/ar37-rs/xow64-wine/releases/download/latest/xow64_wine.tar.xz && echo "extracting xow64_wine.tar.xz..." && tar -xf $TPH/xow64_wine.tar.xz && rm -rf $TPH/xow64_wine.tar.xz && echo " " && echo "Updating wined3d components..." && cd && rm -rf $TPH/wined3d.tar.xz && rm -rf $TPH/xow64_wine/wined3d.tar.xz && wget https://github.com/ar37-rs/xow64-wine/raw/refs/heads/main/components/wined3d.tar.xz && mv $TPH/wined3d.tar.xz $TPH/xow64_wine/wined3d.tar.xz
    fi
    
    cp -r $TPH/xow64_wine/share/wine /data/data/com.termux/files/usr/glibc/share
    dllsoverride
    echo "done."
elif [[ "$1" == "update-patch" ]]; then
    wine_q
    echo "Updating patch..."
    if [ -f $TPH/.xow64-proot ]; then
        cd && rm -rf ~/xow64_wine_patch.tar.xz && cd && wget https://github.com/ar37-rs/xow64-wine/releases/download/latest/xow64_wine_patch.tar.xz && echo "extracting xow64_wine_patch.tar.xz..." && tar -xf ~/xow64_wine_patch.tar.xz && rm -rf ~/xow64_wine_patch.tar.xz && cp -r .xow64_wine $TPH/ && rm -rf .xow64_wine && rm -rf ~/xow64_box64
    else
        if [ ! -d $TPH/xow64_box64 ]; then
            echo "Installing box64-0.3.3..."
            cd && rm -rf $TPH/xow64_box64.tar.xz && rm -rf && cd && wget https://github.com/ar37-rs/xow64-wine/raw/refs/heads/main/components/xow64_box64.tar.xz && echo "extracting xow64_box64.tar.xz..." && tar -xf $TPH/xow64_box64.tar.xz && rm -rf $TPH/xow64_box64.tar.xz
        fi
        cd && rm -rf $TPH/xow64_wine_patch.tar.xz && cd && wget https://github.com/ar37-rs/xow64-wine/releases/download/latest/xow64_wine_patch.tar.xz && echo "extracting xow64_wine_patch.tar.xz..." && tar -xf $TPH/xow64_wine_patch.tar.xz && rm -rf $TPH/xow64_wine_patch.tar.xz
    fi
    
    cp -r $TPH/xow64_wine/share/wine /data/data/com.termux/files/usr/glibc/share
    dllsoverride
    echo "done."
elif [[ "$1" == "update-drivers" ]]; then

    if [ -f $TPH/.xow64-proot ]; then
        if [ -f $TPH/xow64_drivers/.virgl ]; then
            echo "On proot mode updating vglx script only..."
            cd && rm -rf ~/vglx && wget https://github.com/ar37-rs/xow64-wine/releases/download/latest/vglx && chmod +x ~/vglx && mv ~/vglx $TPH/xow64_drivers/vglx
            echo "done."
            exit
        else
            proot_info
        fi
    fi
    
    DRIVERS_UPDATE_AVAIL=no
    if [ -f $TPH/xow64_wine/.vk-radeon ]; then
       DRIVERS_UPDATE_AVAIL=yes
    fi
    if [ -f $TPH/xow64_drivers/.virgl ]; then
       DRIVERS_UPDATE_AVAIL=yes
    fi
    if [[ $DRIVERS_UPDATE_AVAIL == "no" ]]; then
        echo "update-drivers currently available"
        echo "for virpipe driver and vulkan radeon/xclipse GPUs only"
        echo "for other GPUs use the available drivers on the system."
        exit
    fi
    
    echo "Updating graphics drivers..."
    cd && rm -rf $TPH/xow64_drivers.tar.xz && wget https://github.com/ar37-rs/xow64-wine/releases/download/latest/xow64_drivers.tar.xz && echo "extracting xow64_drivers.tar.xz..." && tar -xf $TPH/xow64_drivers.tar.xz && rm -rf $TPH/xow64_drivers.tar.xz
    if [ -f $TPH/xow64_drivers/.virgl ]; then
        cd && rm -rf $TPH/angle-android_2.1.2-latest.deb && wget https://github.com/ar37-rs/virgl-angle/releases/download/latest/angle-android_2.1.2-latest.deb && mv $TPH/angle-android_2.1.2-latest.deb $TPH/xow64_drivers/angle-android_2.1.2-latest.deb && rm -rf $TPH/virglrenderer_1.1.0-latest_aarch64.deb && wget https://github.com/ar37-rs/virgl-angle/releases/download/latest/virglrenderer_1.1.0-latest_aarch64.deb && mv $TPH/virglrenderer_1.1.0-latest_aarch64.deb $TPH/xow64_drivers/virglrenderer_1.1.0-latest_aarch64.deb && rm -rf $TPH/vglx && wget https://github.com/ar37-rs/xow64-wine/releases/download/latest/vglx && chmod +x $TPH/vglx && mv $TPH/vglx $TPH/xow64_drivers/vglx
        $TPH/xow64_drivers/vglx q
        dpkg -i $TPH/xow64_drivers/angle-android_2.1.2-latest.deb
        dpkg -i $TPH/xow64_drivers/virglrenderer_1.1.0-latest_aarch64.deb
        $TPH/xow64_drivers/vglx cd .
    fi
    echo "done."
elif [[ "$1" == "update-angle" ]]; then
    proot_info
    echo "Updating angle-android..."
    if [ -f $TPH/.xow64-proot ]; then
       if [ ! -d $TPH/xow64_drivers ]; then
           mkdir $TPH/xow64_drivers
       fi
    fi
    
    cd && rm -rf $TPH/vglx && wget https://github.com/ar37-rs/xow64-wine/releases/download/latest/vglx && chmod +x $TPH/vglx && mv $TPH/vglx $TPH/xow64_drivers/vglx && cd && rm -rf $TPH/angle-android_2.1.2-latest.deb && wget https://github.com/ar37-rs/virgl-angle/releases/download/latest/angle-android_2.1.2-latest.deb && mv $TPH/angle-android_2.1.2-latest.deb $TPH/xow64_drivers/angle-android_2.1.2-latest.deb
    $TPH/xow64_drivers/vglx q
    dpkg -i $TPH/xow64_drivers/angle-android_2.1.2-latest.deb
    echo "done."
    $TPH/xow64_drivers/vglx cd .
elif [[ "$1" == "update-vkd3d" || "$1" == "update-vkd3d-async" ]]; then
    wine_q
    echo "Updating dxvk-proton (vkd3d) components..."
    if [ -f $TPH/.xow64-proot ]; then
        cd && rm -rf ~/xow64_dxvk_proton.tar.xz && rm -rf $TPH/xow64_wine/xow64_dxvk_proton.tar.xz && wget https://github.com/ar37-rs/xow64-wine/raw/refs/heads/main/components/xow64_dxvk_proton.tar.xz && mv ~/xow64_dxvk_proton.tar.xz $TPH/xow64_wine/xow64_dxvk_proton.tar.xz
        cd && rm -rf ~/xow64_dxvk_async_proton.tar.xz && rm -rf $TPH/xow64_wine/xow64_dxvk_async_proton.tar.xz && wget https://github.com/ar37-rs/xow64-wine/raw/refs/heads/main/components/xow64_dxvk_async_proton.tar.xz && mv ~/xow64_dxvk_async_proton.tar.xz $TPH/xow64_wine/xow64_dxvk_async_proton.tar.xz
    else
        cd && rm -rf $TPH/xow64_dxvk_proton.tar.xz && rm -rf $TPH/xow64_wine/xow64_dxvk_proton.tar.xz && wget https://github.com/ar37-rs/xow64-wine/raw/refs/heads/main/components/xow64_dxvk_proton.tar.xz && mv $TPH/xow64_dxvk_proton.tar.xz $TPH/xow64_wine/xow64_dxvk_proton.tar.xz
        cd && rm -rf $TPH/xow64_dxvk_async_proton.tar.xz && rm -rf $TPH/xow64_wine/xow64_dxvk_async_proton.tar.xz && wget https://github.com/ar37-rs/xow64-wine/raw/refs/heads/main/components/xow64_dxvk_async_proton.tar.xz && mv $TPH/xow64_dxvk_async_proton.tar.xz $TPH/xow64_wine/xow64_dxvk_async_proton.tar.xz
    fi
    if [[ "$1" == "update-vkd3d-async" ]]; then
        echo "extracting xow64_dxvk_async_proton.tar.xz..." && cd $TPH/xow64_wine && tar -xf xow64_dxvk_async_proton.tar.xz && cd && cp -r $TPH/xow64_wine/.xow64_wine $TPH/ && rm -rf $TPH/xow64_wine/.xow64_wine
    else
        echo "extracting xow64_dxvk_proton.tar.xz..." && cd $TPH/xow64_wine && tar -xf xow64_dxvk_proton.tar.xz && cd && cp -r $TPH/xow64_wine/.xow64_wine $TPH/ && rm -rf $TPH/xow64_wine/.xow64_wine  
    fi
    echo "done."
elif [[ "$1" == "q" ]]; then
    echo "quiting wine..."
    wine_q
    sleep 1
elif [[ "$1" == "vk=radeon" ]]; then
    if [ -f $TPH/.xow64-proot ]; then
        if [ ! -d $TPH/xow64_wine ]; then
            mkdir $TPH/xow64_wine
        fi
    else
        if [ ! -d $TPH/xow64_drivers ]; then
            cd && rm -rf $TPH/xow64_drivers.tar.xz && wget https://github.com/ar37-rs/xow64-wine/releases/download/latest/xow64_drivers.tar.xz && echo "extracting xow64_drivers.tar.xz..." && tar -xf $TPH/xow64_drivers.tar.xz && rm -rf $TPH/xow64_drivers.tar.xz
        fi
    fi
    if [ -f $TPH/xow64_wine/.vk-turnip ]; then
        rm -rf $TPH/xow64_wine/.vk-turnip
    fi
    if [ -f $TPH/xow64_wine/.vk-llvmpipe ]; then
        rm -rf $TPH/xow64_wine/.vk-llvmpipe
    fi
    touch $TPH/xow64_wine/.vk-radeon
    echo "using vulkan radeon driver."
elif [[ "$1" == "vk=turnip" ]]; then
    if [ -f $TPH/.xow64-proot ]; then
        if [ ! -d $TPH/xow64_wine ]; then
            mkdir $TPH/xow64_wine
        fi
    fi
    if [ -f $TPH/xow64_wine/.vk-llvmpipe ]; then
        rm -rf $TPH/xow64_wine/.vk-llvmpipe
    fi
    if [ -f $TPH/xow64_wine/.vk-radeon ]; then
        rm -rf $TPH/xow64_wine/.vk-radeon
    fi
    touch $TPH/xow64_wine/.vk-turnip
    echo "using adreno/turnip driver."
elif [[ "$1" == "vk=lvp" ]]; then
    if [ -f $TPH/.xow64-proot ]; then
        if [ ! -d $TPH/xow64_wine ]; then
            mkdir $TPH/xow64_wine
        fi
    fi
    if [ -f $TPH/xow64_wine/.vk-radeon ]; then
        rm -rf $TPH/xow64_wine/.vk-radeon
    fi
    if [ -f $TPH/xow64_wine/.vk-turnip ]; then
        rm -rf $TPH/xow64_wine/.vk-turnip
    fi
    touch $TPH/xow64_wine/.vk-llvmpipe
    echo "using vulkan llvmpipe driver."
elif [[ "$1" == "vk=default" ]]; then
    if [ -f $TPH/xow64_wine/.vk-turnip ]; then
        rm -rf $TPH/xow64_wine/.vk-turnip
    fi
    if [ -f $TPH/xow64_wine/.vk-radeon ]; then
        rm -rf $TPH/xow64_wine/.vk-radeon
    fi
    if [ -f $TPH/xow64_wine/.vk-llvmpipe ]; then
        rm -rf $TPH/xow64_wine/.vk-llvmpipe
    fi
    echo "using vulkan default driver."
elif [[ "$1" == "driver=virpipe" ]]; then
    if [ -f $TPH/xow64_drivers/.panfrost ]; then
        rm -rf $TPH/xow64_drivers/.panfrost
    fi
    if [ -f $TPH/xow64_drivers/.panthor ]; then
        rm -rf $TPH/xow64_drivers/.panthor
    fi
    if [ ! -d $TPH/xow64_drivers ]; then
        if [ -f $TPH/.xow64-proot ]; then
            mkdir $TPH/xow64_drivers
        else
            echo "Installing virgl components..." && cd && rm -rf $TPH/xow64_drivers.tar.xz && wget https://github.com/ar37-rs/xow64-wine/releases/download/latest/xow64_drivers.tar.xz && echo "extracting xow64_drivers.tar.xz..." && tar -xf $TPH/xow64_drivers.tar.xz && rm -rf $TPH/xow64_drivers.tar.xz
        fi
    fi

    if [ ! -f $TPH/.xow64-proot ]; then
        if [ ! -d $TPH/xow64_drivers ]; then
            cd && rm -rf $TPH/xow64_drivers.tar.xz && wget https://github.com/ar37-rs/xow64-wine/releases/download/latest/xow64_drivers.tar.xz && echo "extracting xow64_drivers.tar.xz..." && tar -xf $TPH/xow64_drivers.tar.xz && rm -rf $TPH/xow64_drivers.tar.xz
        fi
        if [ ! -f $TPH/xow64_drivers/virglrenderer_1.1.0-latest_aarch64.deb ]; then
            cd && rm -rf $TPH/virglrenderer_1.1.0-latest_aarch64.deb && wget https://github.com/ar37-rs/virgl-angle/releases/download/latest/virglrenderer_1.1.0-latest_aarch64.deb && mv $TPH/virglrenderer_1.1.0-latest_aarch64.deb $TPH/xow64_drivers/virglrenderer_1.1.0-latest_aarch64.deb
        fi

        if [ ! -f $TPH/xow64_drivers/angle-android_2.1.2-latest.deb ]; then
             cd && rm -rf $TPH/angle-android_2.1.2-latest.deb && wget https://github.com/ar37-rs/virgl-angle/releases/download/latest/angle-android_2.1.2-latest.deb && mv $TPH/angle-android_2.1.2-latest.deb $TPH/xow64_drivers/angle-android_2.1.2-latest.deb
        fi
    fi

    if [ -f $TPH/.xow64-proot ]; then
        if [ ! -d $TPH/xow64_drivers ]; then
            mkdir $TPH/xow64_drivers
        fi
        if [ ! -f $TPH/xow64_drivers/vglx ]; then
            cd && rm -rf ~/vglx && wget https://github.com/ar37-rs/xow64-wine/releases/download/latest/vglx && chmod +x ~/vglx && mv ~/vglx $TPH/xow64_drivers/vglx
        fi
    else
        if [ ! -f $TPH/xow64_drivers/vglx ]; then
            cd && rm -rf $TPH/vglx && wget https://github.com/ar37-rs/xow64-wine/releases/download/latest/vglx && chmod +x $TPH/vglx && mv $TPH/vglx $TPH/xow64_drivers/vglx
        fi
    fi

    if [ ! -f $TPH/xow64_drivers/.virgl ]; then
        touch $TPH/xow64_drivers/.virgl
    fi

    if [ ! -f $TPH/.xow64-proot ]; then
        $TPH/xow64_drivers/vglx q
        echo "Installing angle-android with vulkan validation layer..."
        dpkg -i $TPH/xow64_drivers/angle-android_2.1.2-latest.deb
        echo "Installing virgl..."
        dpkg -i $TPH/xow64_drivers/virglrenderer_1.1.0-latest_aarch64.deb
        $TPH/xow64_drivers/vglx cd .
    fi
    echo "Virpipe is installed"
elif [[ "$1" == "driver=default" ]]; then
    if [ -f $TPH/xow64_drivers/.virgl ]; then
        rm -rf $TPH/xow64_drivers/.virgl
    fi
    if [ -f $TPH/xow64_drivers/.panfrost ]; then
        rm -rf $TPH/xow64_drivers/.panfrost
    fi
    if [ -f $TPH/xow64_drivers/.panthor ]; then
        rm -rf $TPH/xow64_drivers/.panthor
    fi
    echo "using default OpenGL/ES driver."
elif [[ "$1" == "driver=panfrost" ]]; then
    if [ -f $TPH/xow64_drivers/.virgl ]; then
        rm -rf $TPH/xow64_drivers/.virgl
    fi
    if [ -f $TPH/xow64_drivers/.panthor ]; then
        rm -rf $TPH/xow64_drivers/.panthor
    fi
    if [ -f $TPH/.xow64-proot ]; then
        if [ ! -d $TPH/xow64_drivers ]; then
            mkdir $TPH/xow64_drivers
        fi
    fi
    touch $TPH/xow64_drivers/.panfrost
    echo "using panfrost OpenGL/ES driver."
    pan_info
elif [[ "$1" == "driver=panthor" ]]; then
    if [ -f $TPH/xow64_drivers/.virgl ]; then
        rm -rf $TPH/xow64_drivers/.virgl
    fi
    if [ -f $TPH/.xow64-proot ]; then
        if [ ! -d $TPH/xow64_drivers ]; then
            mkdir $TPH/xow64_drivers
        fi
    fi
    touch $TPH/xow64_drivers/.panfrost
    touch $TPH/xow64_drivers/.panthor
    echo "using panthor OpenGL/ES driver."
    pan_info
elif [[ "$1" == "mmap32=true" ]]; then
    if [ -f $TPH/xow64_wine/.no_mmap32 ]; then
        rm -rf $TPH/xow64_wine/.no_mmap32
    fi
    echo "BOX64_MMAP32 is activated."
elif [[ "$1" == "mmap32=false" ]]; then
    touch $TPH/xow64_wine/.no_mmap32
    echo "BOX64_MMAP32 is deactivated."
elif [[ "$1" == "debug=true" ]]; then
    if [ -f $TPH/xow64_wine/.no_debug ]; then
        rm -rf $TPH/xow64_wine/.no_debug
    fi
    echo "Wine debugger enabled."
elif [[ "$1" == "debug=false" ]]; then
    touch $TPH/xow64_wine/.no_debug
    echo "Wine debugger disabled."
elif [[ "$1" == "vgl-compat=2.1" ]]; then
    $TPH/xow64_drivers/vglx 2.1COMPAT
elif [[ "$1" == "vgl-compat=3.2" ]]; then
    $TPH/xow64_drivers/vglx 3.2COMPAT
elif [[ "$1" == "vgl-compat=3.3" ]]; then
    $TPH/xow64_drivers/vglx 3.3COMPAT
elif [[ "$1" == "vgl-compat=4.1" ]]; then
    $TPH/xow64_drivers/vglx 4.1COMPAT
elif [[ "$1" == "vgl-compat=4.3" ]]; then
    $TPH/xow64_drivers/vglx 4.3COMPAT
elif [[ "$1" == "vgl-cfg=d3d" ]]; then
    $TPH/xow64_drivers/vglx config=d3d
elif [[ "$1" == "vgl-cfg=gl" ]]; then
    $TPH/xow64_drivers/vglx config=gl
elif [[ "$1" == "vgl-use=angle" ]]; then
    $TPH/xow64_drivers/vglx use-angle
elif [[ "$1" == "vgl-use=android" ]]; then
    $TPH/xow64_drivers/vglx use-android
elif [[ "$1" == "vkd3d=true" || "$1" == "vkd3d-async=true" ]]; then
if [ ! -f $TPH/.xow64_wine/user.reg ]; then
    $EXEX $BOX64X $TPH/xow64_wine/bin/wine wineboot
fi

wine_q

if [[ "$1" == "vkd3d-async=true" ]]; then
    echo "Installing dxvk-proton (vkd3d) async components..."
    if [ ! -f $TPH/.xow64-proot ]; then
        if [ ! -f $TPH/xow64_wine/xow64_dxvk_async_proton.tar.xz ]; then
            cd && rm -rf $TPH/xow64_dxvk_async_proton.tar.xz && rm -rf $TPH/xow64_wine/xow64_dxvk_async_proton.tar.xz && wget https://github.com/ar37-rs/xow64-wine/raw/refs/heads/main/components/xow64_dxvk_async_proton.tar.xz && mv $TPH/xow64_dxvk_async_proton.tar.xz $TPH/xow64_wine/xow64_dxvk_async_proton.tar.xz
        fi
    else
        if [ ! -f $TPH/xow64_wine/xow64_dxvk_async_proton.tar.xz ]; then
            cd && rm -rf ~/xow64_dxvk_async_proton.tar.xz && wget https://github.com/ar37-rs/xow64-wine/raw/refs/heads/main/components/xow64_dxvk_async_proton.tar.xz && mv ~/xow64_dxvk_async_proton.tar.xz $TPH/xow64_wine/xow64_dxvk_async_proton.tar.xz
        fi
    fi
else
    if [ ! -f $TPH/.xow64-proot ]; then
        if [ ! -f $TPH/xow64_wine/xow64_dxvk_proton.tar.xz ]; then
            echo "Installing dxvk-proton (vkd3d) components..."
            cd && rm -rf $TPH/xow64_dxvk_proton.tar.xz && wget https://github.com/ar37-rs/xow64-wine/raw/refs/heads/main/components/xow64_dxvk_proton.tar.xz && mv $TPH/xow64_dxvk_proton.tar.xz $TPH/xow64_wine/xow64_dxvk_proton.tar.xz
        fi
    else
        if [ ! -f $TPH/xow64_wine/xow64_dxvk_proton.tar.xz ]; then
            echo "Installing dxvk-proton (vkd3d) components..."
            cd && rm -rf ~/xow64_dxvk_proton.tar.xz && wget https://github.com/ar37-rs/xow64-wine/raw/refs/heads/main/components/xow64_dxvk_proton.tar.xz && mv ~/xow64_dxvk_proton.tar.xz $TPH/xow64_wine/xow64_dxvk_proton.tar.xz
        fi
    fi
fi

if [[ "$1" == "vkd3d-async=true" ]]; then
    echo "extracting xow64_dxvk_async_proton.tar.xz..." && cd $TPH/xow64_wine && tar -xf xow64_dxvk_async_proton.tar.xz && cd && cp -r $TPH/xow64_wine/.xow64_wine $TPH/ && rm -rf $TPH/xow64_wine/.xow64_wine
    
else
    echo "extracting xow64_dxvk_proton.tar.xz..." && cd $TPH/xow64_wine && tar -xf xow64_dxvk_proton.tar.xz && cd && cp -r $TPH/xow64_wine/.xow64_wine $TPH/ && rm -rf $TPH/xow64_wine/.xow64_wine
fi

if [ -f $TPH/.xow64_wine/user.reg ]; then
cd && cat << EOF >> $TPH/.xow64_wine/user.reg
[Volatile Environment]
"DXVK_STATE_CACHE_PATH"="C:\\.dxvk"
"DXVK_STATE_CACHE"="reset"
"DXVK_ASYNC"="1"
"DXVK_GPLASYNCCACHE"="1"

[Software\\\Wine\\\DllOverrides]
"dxgi"="native,builtin"
"d3d8"="native,builtin"
"d3d9"="native,builtin"
"d3d10core"="native,builtin"
"d3d11"="native,builtin"
"d3d12"="native,builtin"
"d3d12core"="native,builtin"
EOF

if [[ "$1" == "vkd3d-async=true" ]]; then
echo "dxvk-proton (vkd3d) async is activated"
else
echo "dxvk-proton (vkd3d) is activated"
fi

touch $TPH/xow64_wine/.dxvk-proton
fi
echo "done."
elif [[ "$1" == "vkd3d=false" || "$1" == "vkd3d-async=false" ]]; then

wine_q

if [ ! -f $TPH/.xow64-proot ]; then
    if [ ! -f $TPH/xow64_wine/wined3d.tar.xz ]; then
        echo "Reinstalling wined3d components..."
        cd && rm -rf $TPH/wined3d.tar.xz && rm -rf $TPH/xow64_wine/wined3d.tar.xz && wget https://github.com/ar37-rs/xow64-wine/raw/refs/heads/main/components/wined3d.tar.xz && mv $TPH/wined3d.tar.xz $TPH/xow64_wine/wined3d.tar.xz
    fi
else
    if [ ! -f $TPH/xow64_wine/wined3d.tar.xz ]; then
        echo "Reinstalling wined3d components..."
        cd && rm -rf ~/wined3d.tar.xz && wget https://github.com/ar37-rs/xow64-wine/raw/refs/heads/main/components/wined3d.tar.xz && mv ~/wined3d.tar.xz $TPH/xow64_wine/wined3d.tar.xz
    fi
fi

    echo "extracting wined3d.tar.xz..." && cd $TPH/xow64_wine && tar -xf wined3d.tar.xz && cd && cp -r $TPH/xow64_wine/.xow64_wine $TPH/ && rm -rf $TPH/xow64_wine/.xow64_wine

if [ ! -f $TPH/.xow64_wine/user.reg ]; then
    $EXEX $BOX64X $TPH/xow64_wine/bin/wine wineboot
    wine_q
fi
if [ -f $TPH/.xow64_wine/user.reg ]; then
   sed -i '/dxgi"=/d' $TPH/.xow64_wine/user.reg
   sed -i '/d3d8"=/d' $TPH/.xow64_wine/user.reg
   sed -i '/d3d9"=/d' $TPH/.xow64_wine/user.reg
   sed -i '/d3d10core"=/d' $TPH/.xow64_wine/user.reg
   sed -i '/d3d11"=/d' $TPH/.xow64_wine/user.reg
   sed -i '/d3d12"=/d' $TPH/.xow64_wine/user.reg
   sed -i '/d3d12core"=/d' $TPH/.xow64_wine/user.reg
fi
if [ -f $TPH/xow64_wine/.dxvk-proton ]; then
    rm -rf $TPH/xow64_wine/.dxvk-proton
fi

echo "done."
if [[ "$1" == "vkd3d-async=false" ]]; then
echo "dxvk-proton (vkd3d) async is deactivated"
else
echo "dxvk-proton (vkd3d) is deactivated"
fi

elif [[ "$1" == "cnc-ddraw=true" ]]; then
if [ ! -f $TPH/.xow64_wine/user.reg ]; then
    $EXEX $BOX64X $TPH/xow64_wine/bin/wine wineboot
fi

wine_q

if [ -f $TPH/.xow64_wine/user.reg ]; then
cd && cat << EOF >> $TPH/.xow64_wine/user.reg
[Software\\\Wine\\\DllOverrides]
"ddraw"="native,builtin"
"winmm"="native,builtin"
EOF
echo "done."
echo "winedlloverride for cnc-ddraw is activated."
fi
elif [[ "$1" == "cnc-ddraw=false" ]]; then
if [ ! -f $TPH/.xow64_wine/user.reg ]; then
    $EXEX $BOX64X $TPH/xow64_wine/bin/wine wineboot
fi
if [ -f $TPH/.xow64_wine/user.reg ]; then
   wine_q
   sed -i '/ddraw"=/d' $TPH/.xow64_wine/user.reg
   sed -i '/winmm"=/d' $TPH/.xow64_wine/user.reg
fi
echo "winedlloverride for cnc-ddraw is deactivated."
elif [[ "$1" == "remove-all" ]]; then
    wine_q
    echo "xow64 will be removed in 7 seconds..."
    sleep 2
    echo "xow64 will be removed in 6 seconds..."
    sleep 1
    clear
    echo "xow64 will be removed in 5 seconds..."
    sleep 1
    clear
    echo "xow64 will be removed in 4 seconds..."
    sleep 1
    clear
    echo "xow64 will be removed in 3 seconds..."
    sleep 1
    clear
    echo "xow64 will be removed in 2 seconds..."
    sleep 1
    clear
    echo "xow64 will be removed in 1 second..."
    sleep 1
    clear
    echo "xow64 will be removed in 0 second..."
    sleep 1
    clear
    echo "removing .xow64_wine..."
    rm -rf $TPH/.xow64_wine
    rm -rf ~/.xow64_wine
    echo "removing xow64_wine..."
    rm -rf $TPH/xow64_wine
    rm -rf ~/xow64_wine
    echo "removing xow64_box64..."
    rm -rf $TPH/xow64_box64
    rm -rf ~/xow64_box64
    echo "removing xow64_drivers..."
    rm -rf $TPH/xow64_drivers
    echo "removing xow64_prefix..."
    rm -rf ~/xow64_prefix
    echo "done."
elif [[ "$1" == "desk-size" ]]; then
    wine_q
    if [[ ! $2 == [0-9]*[0-9]x[0-9]*[0-9] ]]; then
        echo "incorrect desktop size it contains unmatched ${2}"
        exit
    fi

    if [ ! -f $TPH/.xow64_wine/user.reg ]; then
        $EXEX $BOX64X $TPH/xow64_wine/bin/wine wineboot
    fi

    if [ -f $TPH/.xow64_wine/user.reg ]; then

        sed -i '/Default"="[a-zA-Z0-9]*x[a-zA-Z0-9]*/d' $TPH/.xow64_wine/user.reg

cd && cat << EOF >> $TPH/.xow64_wine/user.reg
[Software\\\Wine\\\Explorer\\\Desktops]
"Default"="${2}"
EOF
    echo "${2}" > $TPH/xow64_wine/.desk-size
    echo "done."
    echo "desktop size has been configured to ${2}"
    fi
elif [[ "$1" == "s" ]]; then
    if [ -f $TPH/xow64_wine/.desk-size ]; then
        DESK_SIZE=$(cat $TPH/xow64_wine/.desk-size)
        if [[ $DESK_SIZE == "" ]]; then
            DESK_SIZE=800x600
        fi
    else
        DESK_SIZE=800x600
    fi
    vkinfo
    if [ -f $TPH/xow64_drivers/.virgl ]; then
        if [ ! -f $TPH/.xow64-proot ]; then
            export LD_LIBRARY_PATH=$TPH/xow64_drivers/lib:$LD_LIBRARY_PATH && export LD_LIBRARY_PATH=$TPH/xow64_drivers/lib/d3d:$LD_LIBRARY_PATH && export LIBGL_DRIVERS_PATH=$TPH/xow64_drivers/lib/dri
        fi
        $TPH/xow64_drivers/vglx $EXEX $BOX64X $TPH/xow64_wine/bin/wine start explorer /desktop=shell,$DESK_SIZE
    elif [ -f $TPH/xow64_drivers/.panfrost ]; then
        pan_info
        export LIBGL_DRI3_DISABLE=0
        export MESA_LOADER_DRIVER_OVERRIDE=
        if [ -f $TPH/xow64_drivers/.panthor ]; then
            export GALLIUM_DRIVER=panthor
        else
            export GALLIUM_DRIVER=panfrost
        fi
        export MESA_GL_VERSION_OVERRIDE=3.2COMPAT
        export MESA_GLSL_VERSION_OVERRIDE=150
        export MESA_GLES_VERSION_OVERRIDE=3.1
        
        $EXEX $BOX64X $TPH/xow64_wine/bin/wine start explorer /desktop=shell,$DESK_SIZE
    else
        $EXEX $BOX64X $TPH/xow64_wine/bin/wine start explorer /desktop=shell,$DESK_SIZE
    fi
elif [[ "$1" == "gpucaps" ]]; then
    GPUCAPS=$TPH/.xow64_wine/drive_c/ProgramData/GpuCaps
    vkinfo
    if [ -f $TPH/xow64_drivers/.virgl ]; then
        cd $GPUCAPS
        if [ ! -f $TPH/.xow64-proot ]; then
            export LD_LIBRARY_PATH=$TPH/xow64_drivers/lib:$LD_LIBRARY_PATH && export LD_LIBRARY_PATH=$TPH/xow64_drivers/lib/d3d:$LD_LIBRARY_PATH && export LIBGL_DRIVERS_PATH=$TPH/xow64_drivers/lib/dri
        fi
        $TPH/xow64_drivers/vglx $EXEX $BOX64X $TPH/xow64_wine/bin/wine GpuCaps.exe
    elif [ -f $TPH/xow64_drivers/.panfrost ]; then
        pan_info
        export LIBGL_DRI3_DISABLE=0
        export MESA_LOADER_DRIVER_OVERRIDE=
        if [ -f $TPH/xow64_drivers/.panthor ]; then
            export GALLIUM_DRIVER=panthor
        else
            export GALLIUM_DRIVER=panfrost
        fi
        export MESA_GL_VERSION_OVERRIDE=3.2COMPAT
        export MESA_GLSL_VERSION_OVERRIDE=150
        export MESA_GLES_VERSION_OVERRIDE=3.1
        cd $GPUCAPS && $EXEX $BOX64X $TPH/xow64_wine/bin/wine GpuCaps.exe
    else
        cd $GPUCAPS && $EXEX $BOX64X $TPH/xow64_wine/bin/wine GpuCaps.exe
    fi
elif [[ "$1" == "testd3d" ]]; then
    vkinfo
    if [ -f $TPH/xow64_drivers/.virgl ]; then
        cd $TPH/'.xow64_wine/drive_c/ProgramData/Microsoft/Windows/Start Menu/Programs'
        if [ ! -f $TPH/.xow64-proot ]; then
            export LD_LIBRARY_PATH=$TPH/xow64_drivers/lib:$LD_LIBRARY_PATH && export LD_LIBRARY_PATH=$TPH/xow64_drivers/lib/d3d:$LD_LIBRARY_PATH && export LIBGL_DRIVERS_PATH=$TPH/xow64_drivers/lib/dri
        fi
        $TPH/xow64_drivers/vglx $EXEX $BOX64X $TPH/xow64_wine/bin/wine TestD3D.exe
    elif [ -f $TPH/xow64_drivers/.panfrost ]; then
        pan_info
        export LIBGL_DRI3_DISABLE=0
        export MESA_LOADER_DRIVER_OVERRIDE=
        if [ -f $TPH/xow64_drivers/.panthor ]; then
            export GALLIUM_DRIVER=panthor
        else
            export GALLIUM_DRIVER=panfrost
        fi
        export MESA_GL_VERSION_OVERRIDE=3.2COMPAT
        export MESA_GLSL_VERSION_OVERRIDE=150
        export MESA_GLES_VERSION_OVERRIDE=3.1
        cd $TPH/'.xow64_wine/drive_c/ProgramData/Microsoft/Windows/Start Menu/Programs' && $EXEX $BOX64X $TPH/xow64_wine/bin/wine TestD3D.exe
    else
        cd $TPH/'.xow64_wine/drive_c/ProgramData/Microsoft/Windows/Start Menu/Programs' && $EXEX $BOX64X $TPH/xow64_wine/bin/wine TestD3D.exe
    fi
 elif [[ "$1" == "cubemap" ]]; then
    CUBEMAP=$TPH/.xow64_wine/drive_c/ProgramData/EnvMapping
    vkinfo
    if [ -f $TPH/xow64_drivers/.virgl ]; then
        cd $CUBEMAP
        if [ ! -f $TPH/.xow64-proot ]; then
            export LD_LIBRARY_PATH=$TPH/xow64_drivers/lib:$LD_LIBRARY_PATH && export LD_LIBRARY_PATH=$TPH/xow64_drivers/lib/d3d:$LD_LIBRARY_PATH && export LIBGL_DRIVERS_PATH=$TPH/xow64_drivers/lib/dri
        fi
        $TPH/xow64_drivers/vglx $EXEX $BOX64X $TPH/xow64_wine/bin/wine CubeMap.exe
    elif [ -f $TPH/xow64_drivers/.panfrost ]; then
        pan_info
        export LIBGL_DRI3_DISABLE=0
        export MESA_LOADER_DRIVER_OVERRIDE=
        if [ -f $TPH/xow64_drivers/.panthor ]; then
            export GALLIUM_DRIVER=panthor
        else
            export GALLIUM_DRIVER=panfrost
        fi
        export MESA_GL_VERSION_OVERRIDE=3.2COMPAT
        export MESA_GLSL_VERSION_OVERRIDE=150
        export MESA_GLES_VERSION_OVERRIDE=3.1
        cd $CUBEMAP $EXEX $BOX64X $TPH/xow64_wine/bin/wine CubeMap.exe
    else
        cd $CUBEMAP && $EXEX $BOX64X $TPH/xow64_wine/bin/wine CubeMap.exe
    fi
elif [[ "$1" == "spheremap" ]]; then
    SHEREMAP=$TPH/.xow64_wine/drive_c/ProgramData/EnvMapping
    vkinfo
    if [ -f $TPH/xow64_drivers/.virgl ]; then
        cd $SHEREMAP
        if [ ! -f $TPH/.xow64-proot ]; then
            export LD_LIBRARY_PATH=$TPH/xow64_drivers/lib:$LD_LIBRARY_PATH && export LD_LIBRARY_PATH=$TPH/xow64_drivers/lib/d3d:$LD_LIBRARY_PATH && export LIBGL_DRIVERS_PATH=$TPH/xow64_drivers/lib/dri
        fi
        $TPH/xow64_drivers/vglx $EXEX $BOX64X $TPH/xow64_wine/bin/wine SphereMap.exe
    elif [ -f $TPH/xow64_drivers/.panfrost ]; then
        pan_info
        export LIBGL_DRI3_DISABLE=0
        export MESA_LOADER_DRIVER_OVERRIDE=
        if [ -f $TPH/xow64_drivers/.panthor ]; then
            export GALLIUM_DRIVER=panthor
        else
            export GALLIUM_DRIVER=panfrost
        fi
        export MESA_GL_VERSION_OVERRIDE=3.2COMPAT
        export MESA_GLSL_VERSION_OVERRIDE=150
        export MESA_GLES_VERSION_OVERRIDE=3.1
        cd $SHEREMAP && $EXEX $BOX64X $TPH/xow64_wine/bin/wine SphereMap.exe
    else
        cd $SHEREMAP && $EXEX $BOX64X $TPH/xow64_wine/bin/wine SphereMap.exe
    fi
elif [[ "$1" == "r" ]]; then
    vkinfo
    if [ -f $TPH/xow64_drivers/.virgl ]; then
        if [ ! -f $TPH/.xow64-proot ]; then
            export LD_LIBRARY_PATH=$TPH/xow64_drivers/lib:$LD_LIBRARY_PATH && export LD_LIBRARY_PATH=$TPH/xow64_drivers/lib/d3d:$LD_LIBRARY_PATH && export LIBGL_DRIVERS_PATH=$TPH/xow64_drivers/lib/dri
        fi
        $TPH/xow64_drivers/vglx $EXEX $BOX64X $TPH/xow64_wine/bin/wine "${@:2}"
    elif [ -f $TPH/xow64_drivers/.panfrost ]; then
        pan_info
        export LIBGL_DRI3_DISABLE=0
        export MESA_LOADER_DRIVER_OVERRIDE=
        if [ -f $TPH/xow64_drivers/.panthor ]; then
            export GALLIUM_DRIVER=panthor
        else
            export GALLIUM_DRIVER=panfrost
        fi
        export MESA_GL_VERSION_OVERRIDE=3.2COMPAT
        export MESA_GLSL_VERSION_OVERRIDE=150
        export MESA_GLES_VERSION_OVERRIDE=3.1
        $EXEX $BOX64X $TPH/xow64_wine/bin/wine "${@:2}"
    else
        $EXEX $BOX64X $TPH/xow64_wine/bin/wine "${@:2}"
    fi
else
echo "Command not found"
echo "Please input the correct available command."
echo "or try:"
echo "wine r app_name.exe"
fi
fi
